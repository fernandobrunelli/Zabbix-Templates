<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <groups>
        <group>
            <name>Templates/Modules</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>Template Module Linux CPU SNMP</template>
            <name>Template Module Linux CPU SNMP</name>
            <description>MIBs used:&#13;
HOST-RESOURCES-MIB&#13;
UCD-SNMP-MIB&#13;
&#13;
Template tooling version used: 0.36</description>
            <groups>
                <group>
                    <name>Templates/Modules</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>CPU</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>Interrupts per second</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2021.11.59.0</snmp_oid>
                    <key>system.cpu.intr[ssRawInterrupts.0]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                    </preprocessing>
                </item>
                <item>
                    <name>Load average (1m avg)</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-1&quot;]</snmp_oid>
                    <key>system.cpu.load.avg1[laLoad.1]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>MIB: UCD-SNMP-MIB</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>Load average (5m avg)</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-5&quot;]</snmp_oid>
                    <key>system.cpu.load.avg5[laLoad.2]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>MIB: UCD-SNMP-MIB</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>Load average (15m avg)</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-15&quot;]</snmp_oid>
                    <key>system.cpu.load.avg15[laLoad.3]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>MIB: UCD-SNMP-MIB</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>Number of CPUs</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.25.3.3.1.1]</snmp_oid>
                    <key>system.cpu.num[snmp]</key>
                    <history>7d</history>
                    <description>MIB: HOST-RESOURCES-MIB&#13;
Count the number of CPU cores by counting number of cores discovered in hrProcessorTable using LLD</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//count the number of cores
return JSON.parse(value).length;
</params>
                        </step>
                    </preprocessing>
                </item>
                <item>
                    <name>Context switches per second</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2021.11.60.0</snmp_oid>
                    <key>system.cpu.switches[ssRawContexts.0]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                    </preprocessing>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>CPU discovery</name>
                    <type>DEPENDENT</type>
                    <key>cpu.discovery[snmp]</key>
                    <delay>0</delay>
                    <description>This discovery will create set of per core CPU metrics from UCD-SNMP-MIB, using {#CPU.COUNT} in preprocessing. That's the only reason why LLD is used.</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>CPU guest time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.65.0</snmp_oid>
                            <key>system.cpu.guest[ssCpuRawGuest.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
Guest  time (time  spent  running  a  virtual  CPU  for  a  guest  operating  system)</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU guest nice time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.66.0</snmp_oid>
                            <key>system.cpu.guest_nice[ssCpuRawGuestNice.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU idle time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.53.0</snmp_oid>
                            <key>system.cpu.idle[ssCpuRawIdle.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The time the CPU has spent doing nothing.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU interrupt time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.56.0</snmp_oid>
                            <key>system.cpu.interrupt[ssCpuRawInterrupt.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The amount of time the CPU has been servicing hardware interrupts.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU iowait time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.54.0</snmp_oid>
                            <key>system.cpu.iowait[ssCpuRawWait.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
Amount of time the CPU has been waiting for I/O to complete.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU nice time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.51.0</snmp_oid>
                            <key>system.cpu.nice[ssCpuRawNice.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The time the CPU has spent running users' processes that have been niced.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU softirq time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.61.0</snmp_oid>
                            <key>system.cpu.softirq[ssCpuRawSoftIRQ.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The amount of time the CPU has been servicing software interrupts.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU steal time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.64.0</snmp_oid>
                            <key>system.cpu.steal[ssCpuRawSteal.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The amount of CPU 'stolen' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU system time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.52.0</snmp_oid>
                            <key>system.cpu.system[ssCpuRawSystem.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The time the CPU has spent running the kernel and its processes.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU user time</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2021.11.50.0</snmp_oid>
                            <key>system.cpu.user[ssCpuRawUser.{#SNMPINDEX}]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>MIB: UCD-SNMP-MIB&#13;
The time the CPU has spent running users' processes that are not niced.</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}
</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>CPU utilization</name>
                            <type>DEPENDENT</type>
                            <key>system.cpu.util[snmp,{#SNMPINDEX}]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>CPU utilization in %</description>
                            <applications>
                                <application>
                                    <name>CPU</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//Calculate utilization
return (100 - value)
</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>system.cpu.idle[ssCpuRawIdle.{#SNMPINDEX}]</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{min(5m)}&gt;{$CPU.UTIL.CRIT}</expression>
                                    <name>High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)</name>
                                    <opdata>Current utilization: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>CPU utilization is too high. The system might be slow to respond.</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>CPU usage{#SINGLETON}</name>
                            <type>STACKED</type>
                            <ymin_type_1>FIXED</ymin_type_1>
                            <ymax_type_1>FIXED</ymax_type_1>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.system[ssCpuRawSystem.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <color>2774A4</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.user[ssCpuRawUser.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>2</sortorder>
                                    <color>F63100</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.nice[ssCpuRawNice.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>3</sortorder>
                                    <color>A54F10</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.iowait[ssCpuRawWait.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>4</sortorder>
                                    <color>FC6EA3</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.steal[ssCpuRawSteal.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>5</sortorder>
                                    <color>6C59DC</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.interrupt[ssCpuRawInterrupt.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>6</sortorder>
                                    <color>AC8C14</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.softirq[ssCpuRawSoftIRQ.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>7</sortorder>
                                    <color>611F27</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.guest[ssCpuRawGuest.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>8</sortorder>
                                    <color>F230E0</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.guest_nice[ssCpuRawGuestNice.{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                        <graph_prototype>
                            <name>CPU utilization{#SINGLETON}</name>
                            <ymin_type_1>FIXED</ymin_type_1>
                            <ymax_type_1>FIXED</ymax_type_1>
                            <graph_items>
                                <graph_item>
                                    <drawtype>GRADIENT_LINE</drawtype>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template Module Linux CPU SNMP</host>
                                        <key>system.cpu.util[snmp,{#SNMPINDEX}]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>system.cpu.num[snmp]</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//count the number of CPU cores
return JSON.stringify([{&quot;{#CPU.COUNT}&quot;: value, &quot;{#SNMPINDEX}&quot;: 0, &quot;{#SINGLETON}&quot;:&quot;&quot;}])
</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$CPU.UTIL.CRIT}</macro>
                    <value>90</value>
                </macro>
                <macro>
                    <macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro>
                    <value>1.5</value>
                    <description>Load per CPU considered sustainable. Tune if needed.</description>
                </macro>
            </macros>
        </template>
    </templates>
    <triggers>
        <trigger>
            <expression>{Template Module Linux CPU SNMP:system.cpu.load.avg1[laLoad.1].min(5m)}/{Template Module Linux CPU SNMP:system.cpu.num[snmp].last()}&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}&#13;
and {Template Module Linux CPU SNMP:system.cpu.load.avg5[laLoad.2].last()}&gt;0&#13;
and {Template Module Linux CPU SNMP:system.cpu.load.avg15[laLoad.3].last()}&gt;0</expression>
            <name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</name>
            <opdata>Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}</opdata>
            <priority>AVERAGE</priority>
            <description>Per CPU load average is too high. Your system may be slow to respond.</description>
        </trigger>
    </triggers>
    <graphs>
        <graph>
            <name>CPU jumps</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.switches[ssRawContexts.0]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.intr[ssRawInterrupts.0]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>System load</name>
            <ymin_type_1>FIXED</ymin_type_1>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.load.avg1[laLoad.1]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.load.avg5[laLoad.2]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.load.avg15[laLoad.3]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>3</sortorder>
                    <color>A54F10</color>
                    <yaxisside>RIGHT</yaxisside>
                    <item>
                        <host>Template Module Linux CPU SNMP</host>
                        <key>system.cpu.num[snmp]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
    </graphs>
</zabbix_export>
