<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <groups>
        <group>
            <name>Templates/Server hardware</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>Template Server Chassis by IPMI</template>
            <name>Template Server Chassis by IPMI</name>
            <description>Template for monitoring servers with BMC over IPMI that work without any external scripts. &#13;
All metrics are collected at once, thanks to Zabbix's bulk data collection. The template is available starting from Zabbix version 5.0. &#13;
It collects metrics by polling BMC remotely using an IPMI agent.&#13;
&#13;
&#13;
Known Issues:&#13;
&#13;
  Description: If the BMC has a sensor with an empty threshold value, we get the LLD error &quot;Cannot create trigger...&quot;.&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/398023-discussion-thread-for-official-zabbix-template-ipmi&#13;
&#13;
Template tooling version used: 0.35</description>
            <groups>
                <group>
                    <name>Templates/Server hardware</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>General</name>
                </application>
                <application>
                    <name>Zabbix raw items</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>Get IPMI sensors</name>
                    <type>IPMI</type>
                    <key>ipmi.get</key>
                    <history>0</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The master item that receives all sensors with values for LLD and dependent elements from BMC.</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>Discrete sensors discovery</name>
                    <type>DEPENDENT</type>
                    <key>ipmi.discrete.discovery</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#SENSOR_READING_TYPE}</macro>
                                <value>threshold</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>A</formulaid>
                            </condition>
                            <condition>
                                <macro>{#SENSOR_TYPE}</macro>
                                <value>{$IPMI.SENSOR_TYPE.MATCHES}</value>
                                <formulaid>B</formulaid>
                            </condition>
                            <condition>
                                <macro>{#SENSOR_TYPE}</macro>
                                <value>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>C</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Discovery of the discrete IPMI sensors.</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>IPMI: {#SENSOR_ID}</name>
                            <type>DEPENDENT</type>
                            <key>ipmi.state_text[{#SENSOR_ID}]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <trends>0</trends>
                            <value_type>CHAR</value_type>
                            <description>It is a state of the discrete IPMI sensor.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>IPMI {#SENSOR_TYPE}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$.[?(@.id=='{#SENSOR_ID}')].state.text.first()</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>1d</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>ipmi.get</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{diff()}=1</expression>
                                    <name>IPMI: {#SENSOR_ID} value has changed</name>
                                    <priority>INFO</priority>
                                    <description>The trigger is informing about changes in a state of the discrete IPMI sensor. A problem generated by this trigger can be manually closed.</description>
                                    <manual_close>YES</manual_close>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>ipmi.get</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_ID}</lld_macro>
                            <path>$.id</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_READING_TYPE}</lld_macro>
                            <path>$.reading.text</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_TYPE}</lld_macro>
                            <path>$.sensor.text</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_UNIT}</lld_macro>
                            <path>$.units</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                </discovery_rule>
                <discovery_rule>
                    <name>Threshold sensors discovery</name>
                    <type>DEPENDENT</type>
                    <key>ipmi.sensors.discovery</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#SENSOR_READING_TYPE}</macro>
                                <value>threshold</value>
                                <formulaid>A</formulaid>
                            </condition>
                            <condition>
                                <macro>{#SENSOR_TYPE}</macro>
                                <value>{$IPMI.SENSOR_TYPE.MATCHES}</value>
                                <formulaid>B</formulaid>
                            </condition>
                            <condition>
                                <macro>{#SENSOR_TYPE}</macro>
                                <value>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>C</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Discovery of the threshold IPMI sensors.</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>IPMI: {#SENSOR_ID}, {#SENSOR_UNIT}</name>
                            <type>DEPENDENT</type>
                            <key>ipmi.value[{#SENSOR_ID}]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>It is a state of the threshold IPMI sensor.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>IPMI {#SENSOR_TYPE}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$.[?(@.id=='{#SENSOR_ID}')].value.first()</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>1h</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>ipmi.get</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{min(5m)}&gt;{#SENSOR_HI_CRIT}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is above critical high (greater than {#SENSOR_HI_CRIT} for 5m)</name>
                                    <priority>HIGH</priority>
                                    <description>The trigger is informing that a value higher than the upper critical threshold has been reached.</description>
                                    <dependencies>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&gt;{#SENSOR_HI_WARN}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is above non-critical high (greater than {#SENSOR_HI_WARN} for 5m)</name>
                                    <priority>WARNING</priority>
                                    <description>The trigger is informing that a value higher than the upper non-critical threshold has been reached.</description>
                                    <dependencies>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is above critical high (greater than {#SENSOR_HI_CRIT} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_CRIT}</expression>
                                        </dependency>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)</name>
                                    <priority>DISASTER</priority>
                                    <description>The trigger is informing that a value higher than the upper non-recoverable threshold has been reached.</description>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&lt;{#SENSOR_LO_CRIT}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is below critical low (less than {#SENSOR_LO_CRIT} for 5m)</name>
                                    <priority>HIGH</priority>
                                    <description>The trigger is informing that a value less than the lower critical threshold has been reached.</description>
                                    <dependencies>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&lt;{#SENSOR_LO_WARN}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is below non-critical low (less than {#SENSOR_LO_WARN} for 5m)</name>
                                    <priority>WARNING</priority>
                                    <description>The trigger is informing that a value less than the lower non-critical threshold has been reached.</description>
                                    <dependencies>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is below critical low (less than {#SENSOR_LO_CRIT} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_CRIT}</expression>
                                        </dependency>
                                        <dependency>
                                            <name>IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)</name>
                                            <expression>{Template Server Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                                    <name>IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)</name>
                                    <priority>DISASTER</priority>
                                    <description>The trigger is informing that a value less than the lower non-recoverable threshold has been reached.</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>IPMI: {#SENSOR_ID}</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template Server Chassis by IPMI</host>
                                        <key>ipmi.value[{#SENSOR_ID}]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>ipmi.get</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_HI_CRIT}</lld_macro>
                            <path>$.threshold.upper.crit</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_HI_DISAST}</lld_macro>
                            <path>$.threshold.upper.non_recover</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_HI_WARN}</lld_macro>
                            <path>$.threshold.upper.non_crit</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_ID}</lld_macro>
                            <path>$.id</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_LO_CRIT}</lld_macro>
                            <path>$.threshold.lower.crit</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_LO_DISAST}</lld_macro>
                            <path>$.threshold.lower.non_recover</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_LO_WARN}</lld_macro>
                            <path>$.threshold.lower.non_crit</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_READING_TYPE}</lld_macro>
                            <path>$.reading.text</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_TYPE}</lld_macro>
                            <path>$.sensor.text</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#SENSOR_UNIT}</lld_macro>
                            <path>$.units</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$IPMI.PASSWORD}</macro>
                    <description>This macro is used for access to BMC. It can be overridden on the host or linked template level.</description>
                </macro>
                <macro>
                    <macro>{$IPMI.SENSOR_TYPE.MATCHES}</macro>
                    <value>.*</value>
                    <description>This macro is used in sensors discovery. It can be overridden on the host or linked template level.</description>
                </macro>
                <macro>
                    <macro>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</macro>
                    <value>invalid</value>
                    <description>This macro is used in sensors discovery. It can be overridden on the host or linked template level.</description>
                </macro>
                <macro>
                    <macro>{$IPMI.USER}</macro>
                    <description>This macro is used for access to BMC. It can be overridden on the host or linked template level.</description>
                </macro>
            </macros>
        </template>
    </templates>
</zabbix_export>
