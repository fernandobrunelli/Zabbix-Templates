<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <groups>
        <group>
            <name>Templates/Server hardware</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>Template Server IBM IMM SNMPv1</template>
            <name>Template Server IBM IMM SNMPv1</name>
            <description>Template Server IBM IMM&#13;
&#13;
MIBs used:&#13;
IMM-MIB&#13;
&#13;
Known Issues:&#13;
&#13;
  Description: Some IMMs (IMM1) do not return disks&#13;
  Version: IMM1&#13;
  Device: IBM x3250M3&#13;
&#13;
  Description: Some IMMs (IMM1) do not return fan status: fanHealthStatus&#13;
  Version: IMM1&#13;
  Device: IBM x3250M3&#13;
&#13;
  Description: IMM1 servers (M2, M3 generations) sysObjectID is NET-SNMP-MIB::netSnmpAgentOIDs.10&#13;
  Version: IMM1&#13;
  Device: IMM1 servers (M2,M3 generations)&#13;
&#13;
  Description: IMM1 servers (M2, M3 generations) only Ambient temperature sensor available&#13;
  Version: IMM1&#13;
  Device: IMM1 servers (M2,M3 generations)&#13;
&#13;
Template tooling version used: 0.34</description>
            <templates>
                <template>
                    <name>Template Module Generic SNMPv1</name>
                </template>
            </templates>
            <groups>
                <group>
                    <name>Templates/Server hardware</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>Fans</name>
                </application>
                <application>
                    <name>Inventory</name>
                </application>
                <application>
                    <name>Physical disks</name>
                </application>
                <application>
                    <name>Power supply</name>
                </application>
                <application>
                    <name>Temperature</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>Hardware model name</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.5.2.1.5.0</snmp_oid>
                    <key>system.hw.model</key>
                    <delay>1h</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>MIB: IMM-MIB</description>
                    <inventory_link>MODEL</inventory_link>
                    <applications>
                        <application>
                            <name>Inventory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                </item>
                <item>
                    <name>Hardware serial number</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.5.2.1.3.0</snmp_oid>
                    <key>system.hw.serialnumber</key>
                    <delay>1h</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>MIB: IMM-MIB&#13;
Machine serial number VPD information</description>
                    <inventory_link>SERIALNO_A</inventory_link>
                    <applications>
                        <application>
                            <name>Inventory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <triggers>
                        <trigger>
                            <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                            <name>Device has been replaced (new serial number received)</name>
                            <priority>INFO</priority>
                            <description>Device serial number has changed. Ack to close</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>Overall system health status</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.4.1.0</snmp_oid>
                    <key>system.status[systemHealthStat.0]</key>
                    <delay>30s</delay>
                    <history>2w</history>
                    <trends>0d</trends>
                    <description>MIB: IMM-MIB&#13;
Indicates status of system health for the system in which the IMM resides. Value of 'nonRecoverable' indicates a severe error has occurred and the system may not be functioning. A value of 'critical' indicates that a error has occurred but the system is currently functioning properly. A value of 'nonCritical' indicates that a condition has occurred that may change the state of the system in the future but currently the system is working properly. A value of 'normal' indicates that the system is operating normally.</description>
                    <applications>
                        <application>
                            <name>Status</name>
                        </application>
                    </applications>
                    <valuemap>
                        <name>IMM-MIB::systemHealthStat</name>
                    </valuemap>
                    <triggers>
                        <trigger>
                            <expression>{count(#1,{$HEALTH_DISASTER_STATUS},eq)}=1</expression>
                            <name>System is in unrecoverable state!</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>HIGH</priority>
                            <description>Please check the device for faults</description>
                        </trigger>
                        <trigger>
                            <expression>{count(#1,{$HEALTH_CRIT_STATUS},eq)}=1</expression>
                            <name>System status is in critical state</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>HIGH</priority>
                            <description>Please check the device for errors</description>
                            <dependencies>
                                <dependency>
                                    <name>System is in unrecoverable state!</name>
                                    <expression>{Template Server IBM IMM SNMPv1:system.status[systemHealthStat.0].count(#1,{$HEALTH_DISASTER_STATUS},eq)}=1</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                        <trigger>
                            <expression>{count(#1,{$HEALTH_WARN_STATUS},eq)}=1</expression>
                            <name>System status is in warning state</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>WARNING</priority>
                            <description>Please check the device for warnings</description>
                            <dependencies>
                                <dependency>
                                    <name>System is in unrecoverable state!</name>
                                    <expression>{Template Server IBM IMM SNMPv1:system.status[systemHealthStat.0].count(#1,{$HEALTH_DISASTER_STATUS},eq)}=1</expression>
                                </dependency>
                                <dependency>
                                    <name>System status is in critical state</name>
                                    <expression>{Template Server IBM IMM SNMPv1:system.status[systemHealthStat.0].count(#1,{$HEALTH_CRIT_STATUS},eq)}=1</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>FAN Discovery</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#FAN_DESCR},1.3.6.1.4.1.2.3.51.3.1.3.2.1.2]</snmp_oid>
                    <key>fan.discovery</key>
                    <delay>1h</delay>
                    <description>IMM-MIB::fanDescr</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#FAN_DESCR}: Fan speed, %</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.3.2.1.3.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.fan.speed.percentage[fanSpeed.{#SNMPINDEX}]</key>
                            <units>%</units>
                            <description>MIB: IMM-MIB&#13;
Fan speed expressed in percent(%) of maximum RPM.&#13;
An octet string expressed as 'ddd% of maximum' where:d is a decimal digit or blank space for a leading zero.&#13;
If the fan is determined not to be running or the fan speed cannot be determined, the string will indicate 'Offline'.</description>
                            <applications>
                                <application>
                                    <name>Fans</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>(\d{1,3}) *%( of maximum)?
\1</params>
                                </step>
                            </preprocessing>
                        </item_prototype>
                        <item_prototype>
                            <name>{#FAN_DESCR}: Fan status</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.3.2.1.10.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.fan.status[fanHealthStatus.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <history>2w</history>
                            <trends>0</trends>
                            <value_type>CHAR</value_type>
                            <description>MIB: IMM-MIB&#13;
A description of the fan component status.</description>
                            <applications>
                                <application>
                                    <name>Fans</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{count(#1,{$FAN_OK_STATUS},ne)}=1</expression>
                                    <name>{#FAN_DESCR}: Fan is not in normal state</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>INFO</priority>
                                    <description>Please check the fan unit</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
                <discovery_rule>
                    <name>Physical Disk Discovery</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.4.1.2.3.51.3.1.12.2.1.1]</snmp_oid>
                    <key>physicalDisk.discovery</key>
                    <delay>1h</delay>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#SNMPINDEX}: Physical disk part number</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.12.2.1.2.{#SNMPINDEX}</snmp_oid>
                            <key>system.hw.physicaldisk.part_number[diskFruName.{#SNMPINDEX}]</key>
                            <delay>1h</delay>
                            <history>2w</history>
                            <trends>0</trends>
                            <value_type>CHAR</value_type>
                            <description>MIB: IMM-MIB&#13;
disk module FRU name.</description>
                            <applications>
                                <application>
                                    <name>Physical disks</name>
                                </application>
                            </applications>
                        </item_prototype>
                        <item_prototype>
                            <name>{#SNMPINDEX}: Physical disk status</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.12.2.1.3.{#SNMPINDEX}</snmp_oid>
                            <key>system.hw.physicaldisk.status[diskHealthStatus.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <trends>0</trends>
                            <value_type>CHAR</value_type>
                            <description>MIB: IMM-MIB</description>
                            <applications>
                                <application>
                                    <name>Physical disks</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{count(#1,{$DISK_OK_STATUS},ne)}=1</expression>
                                    <name>{#SNMPINDEX}: Physical disk is not in OK state</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>Please check physical disk for warnings or errors</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
                <discovery_rule>
                    <name>PSU Discovery</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#PSU_DESCR},1.3.6.1.4.1.2.3.51.3.1.11.2.1.2]</snmp_oid>
                    <key>psu.discovery</key>
                    <delay>1h</delay>
                    <description>IMM-MIB::powerFruName</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#PSU_DESCR}: Power supply status</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.11.2.1.6.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.psu.status[powerHealthStatus.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <history>2w</history>
                            <trends>0</trends>
                            <value_type>CHAR</value_type>
                            <description>MIB: IMM-MIB&#13;
A description of the power module status.</description>
                            <applications>
                                <application>
                                    <name>Power supply</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{count(#1,{$PSU_OK_STATUS},ne)}=1</expression>
                                    <name>{#PSU_DESCR}: Power supply is not in normal state</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>INFO</priority>
                                    <description>Please check the power supply unit for errors</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
                <discovery_rule>
                    <name>Temperature Discovery</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.4.1.2.3.51.3.1.1.2.1.2]</snmp_oid>
                    <key>tempDescr.discovery</key>
                    <delay>1h</delay>
                    <filter>
                        <conditions>
                            <condition>
                                <macro>{#SNMPVALUE}</macro>
                                <value>(DIMM|PSU|PCH|RAID|RR|PCI).*</value>
                                <formulaid>A</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Scanning IMM-MIB::tempTable</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#SNMPVALUE}: Temperature</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.1.2.1.3.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.temp.value[tempReading.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <value_type>FLOAT</value_type>
                            <units>°C</units>
                            <description>MIB: IMM-MIB&#13;
Temperature readings of testpoint: {#SNMPVALUE}</description>
                            <applications>
                                <application>
                                    <name>Temperature</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_CRIT:&quot;&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_CRIT:&quot;&quot;}-3</recovery_expression>
                                    <name>{#SNMPVALUE}: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>HIGH</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_WARN:&quot;&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_WARN:&quot;&quot;}-3</recovery_expression>
                                    <name>{#SNMPVALUE}: Temperature is above warning threshold: &gt;{$TEMP_WARN:&quot;&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                    <dependencies>
                                        <dependency>
                                            <name>{#SNMPVALUE}: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;&quot;}</name>
                                            <expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.{#SNMPINDEX}].avg(5m)}&gt;{$TEMP_CRIT:&quot;&quot;}</expression>
                                            <recovery_expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.{#SNMPINDEX}].max(5m)}&lt;{$TEMP_CRIT:&quot;&quot;}-3</recovery_expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&lt;{$TEMP_CRIT_LOW:&quot;&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{min(5m)}&gt;{$TEMP_CRIT_LOW:&quot;&quot;}+3</recovery_expression>
                                    <name>{#SNMPVALUE}: Temperature is too low: &lt;{$TEMP_CRIT_LOW:&quot;&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
                <discovery_rule>
                    <name>Temperature Discovery Ambient</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.4.1.2.3.51.3.1.1.2.1.2]</snmp_oid>
                    <key>tempDescr.discovery.ambient</key>
                    <delay>1h</delay>
                    <filter>
                        <conditions>
                            <condition>
                                <macro>{#SNMPVALUE}</macro>
                                <value>Ambient.*</value>
                                <formulaid>A</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Scanning IMM-MIB::tempTable with Ambient filter</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>Ambient: Temperature</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.1.2.1.3.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.temp.value[tempReading.Ambient.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <value_type>FLOAT</value_type>
                            <units>°C</units>
                            <description>MIB: IMM-MIB&#13;
Temperature readings of testpoint: Ambient</description>
                            <applications>
                                <application>
                                    <name>Temperature</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_CRIT:&quot;Ambient&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_CRIT:&quot;Ambient&quot;}-3</recovery_expression>
                                    <name>Ambient: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;Ambient&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>HIGH</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_WARN:&quot;Ambient&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_WARN:&quot;Ambient&quot;}-3</recovery_expression>
                                    <name>Ambient: Temperature is above warning threshold: &gt;{$TEMP_WARN:&quot;Ambient&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                    <dependencies>
                                        <dependency>
                                            <name>Ambient: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;Ambient&quot;}</name>
                                            <expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.Ambient.{#SNMPINDEX}].avg(5m)}&gt;{$TEMP_CRIT:&quot;Ambient&quot;}</expression>
                                            <recovery_expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.Ambient.{#SNMPINDEX}].max(5m)}&lt;{$TEMP_CRIT:&quot;Ambient&quot;}-3</recovery_expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&lt;{$TEMP_CRIT_LOW:&quot;Ambient&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{min(5m)}&gt;{$TEMP_CRIT_LOW:&quot;Ambient&quot;}+3</recovery_expression>
                                    <name>Ambient: Temperature is too low: &lt;{$TEMP_CRIT_LOW:&quot;Ambient&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
                <discovery_rule>
                    <name>Temperature Discovery CPU</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.4.1.2.3.51.3.1.1.2.1.2]</snmp_oid>
                    <key>tempDescr.discovery.cpu</key>
                    <delay>1h</delay>
                    <filter>
                        <conditions>
                            <condition>
                                <macro>{#SNMPVALUE}</macro>
                                <value>CPU [0-9]* Temp</value>
                                <formulaid>A</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Scanning IMM-MIB::tempTable with CPU filter</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>CPU: Temperature</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>1.3.6.1.4.1.2.3.51.3.1.1.2.1.3.{#SNMPINDEX}</snmp_oid>
                            <key>sensor.temp.value[tempReading.CPU.{#SNMPINDEX}]</key>
                            <delay>3m</delay>
                            <value_type>FLOAT</value_type>
                            <units>°C</units>
                            <description>MIB: IMM-MIB&#13;
Temperature readings of testpoint: CPU</description>
                            <applications>
                                <application>
                                    <name>Temperature</name>
                                </application>
                            </applications>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_CRIT:&quot;CPU&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_CRIT:&quot;CPU&quot;}-3</recovery_expression>
                                    <name>CPU: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;CPU&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>HIGH</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&gt;{$TEMP_WARN:&quot;CPU&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{max(5m)}&lt;{$TEMP_WARN:&quot;CPU&quot;}-3</recovery_expression>
                                    <name>CPU: Temperature is above warning threshold: &gt;{$TEMP_WARN:&quot;CPU&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>This trigger uses temperature sensor values as well as temperature sensor status if available</description>
                                    <dependencies>
                                        <dependency>
                                            <name>CPU: Temperature is above critical threshold: &gt;{$TEMP_CRIT:&quot;CPU&quot;}</name>
                                            <expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.CPU.{#SNMPINDEX}].avg(5m)}&gt;{$TEMP_CRIT:&quot;CPU&quot;}</expression>
                                            <recovery_expression>{Template Server IBM IMM SNMPv1:sensor.temp.value[tempReading.CPU.{#SNMPINDEX}].max(5m)}&lt;{$TEMP_CRIT:&quot;CPU&quot;}-3</recovery_expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{avg(5m)}&lt;{$TEMP_CRIT_LOW:&quot;CPU&quot;}</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{min(5m)}&gt;{$TEMP_CRIT_LOW:&quot;CPU&quot;}+3</recovery_expression>
                                    <name>CPU: Temperature is too low: &lt;{$TEMP_CRIT_LOW:&quot;CPU&quot;}</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$DISK_OK_STATUS}</macro>
                    <value>Normal</value>
                </macro>
                <macro>
                    <macro>{$FAN_OK_STATUS}</macro>
                    <value>Normal</value>
                </macro>
                <macro>
                    <macro>{$HEALTH_CRIT_STATUS}</macro>
                    <value>2</value>
                </macro>
                <macro>
                    <macro>{$HEALTH_DISASTER_STATUS}</macro>
                    <value>0</value>
                </macro>
                <macro>
                    <macro>{$HEALTH_WARN_STATUS}</macro>
                    <value>4</value>
                </macro>
                <macro>
                    <macro>{$PSU_OK_STATUS}</macro>
                    <value>Normal</value>
                </macro>
                <macro>
                    <macro>{$TEMP_CRIT}</macro>
                    <value>60</value>
                </macro>
                <macro>
                    <macro>{$TEMP_CRIT:&quot;Ambient&quot;}</macro>
                    <value>35</value>
                </macro>
                <macro>
                    <macro>{$TEMP_CRIT_LOW}</macro>
                    <value>5</value>
                </macro>
                <macro>
                    <macro>{$TEMP_WARN}</macro>
                    <value>50</value>
                </macro>
                <macro>
                    <macro>{$TEMP_WARN:&quot;Ambient&quot;}</macro>
                    <value>30</value>
                </macro>
            </macros>
        </template>
    </templates>
    <value_maps>
        <value_map>
            <name>IMM-MIB::systemHealthStat</name>
            <mappings>
                <mapping>
                    <value>0</value>
                    <newvalue>nonRecoverable</newvalue>
                </mapping>
                <mapping>
                    <value>2</value>
                    <newvalue>critical</newvalue>
                </mapping>
                <mapping>
                    <value>4</value>
                    <newvalue>nonCritical</newvalue>
                </mapping>
                <mapping>
                    <value>255</value>
                    <newvalue>normal</newvalue>
                </mapping>
            </mappings>
        </value_map>
    </value_maps>
</zabbix_export>
