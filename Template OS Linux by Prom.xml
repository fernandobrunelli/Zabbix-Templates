<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <groups>
        <group>
            <name>Templates/Operating systems</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>Template OS Linux by Prom</template>
            <name>Template OS Linux by Prom</name>
            <description>Official Linux template using node exporter.&#13;
&#13;
Known Issues:&#13;
&#13;
  Description: node_exporter v0.16.0 renamed many metrics. CPU utilization for 'guest' and 'guest_nice' metrics are not supported in this template with node_exporter &lt; 0.16. Disk IO metrics are not supported. Other metrics provided as 'best effort'.  &#13;
 See https://github.com/prometheus/node_exporter/releases/tag/v0.16.0 for details.&#13;
  Version: below 0.16.0&#13;
&#13;
  Description: metric node_network_info with label 'device' cannot be found, so network discovery is not possible.&#13;
  Version: below 0.18&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387225-discussion-thread-for-official-zabbix-template-for-linux&#13;
&#13;
Template tooling version used: 0.34</description>
            <groups>
                <group>
                    <name>Templates/Operating systems</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>CPU</name>
                </application>
                <application>
                    <name>General</name>
                </application>
                <application>
                    <name>Inventory</name>
                </application>
                <application>
                    <name>Memory</name>
                </application>
                <application>
                    <name>Monitoring agent</name>
                </application>
                <application>
                    <name>Network interfaces</name>
                </application>
                <application>
                    <name>Status</name>
                </application>
                <application>
                    <name>Storage</name>
                </application>
                <application>
                    <name>Zabbix raw items</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>Version of node_exporter running</name>
                    <type>DEPENDENT</type>
                    <key>agent.version[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <applications>
                        <application>
                            <name>Monitoring agent</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_exporter_build_info
version</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Number of open file descriptors</name>
                    <type>DEPENDENT</type>
                    <key>fd.open[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_filefd_allocated
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Maximum number of open file descriptors</name>
                    <type>DEPENDENT</type>
                    <key>kernel.maxfiles[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>It could be increased by using sysctrl utility or modifying file /etc/sysctl.conf.</description>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_filefd_maximum
</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{last()}&lt;{$KERNEL.MAXFILES.MIN}</expression>
                            <name>Configured max number of open filedescriptors is too low (&lt; {$KERNEL.MAXFILES.MIN})</name>
                            <priority>INFO</priority>
                            <dependencies>
                                <dependency>
                                    <name>Running out of file descriptors (less than &lt; 20% free)</name>
                                    <expression>{Template OS Linux by Prom:fd.open[node_exporter].last()}/{Template OS Linux by Prom:kernel.maxfiles[node_exporter].last()}*100&gt;80</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>Get node_exporter metrics</name>
                    <type>HTTP_AGENT</type>
                    <key>node_exporter.get</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <url>http://{HOST.CONN}:{$NODE_EXPORTER_PORT}/metrics</url>
                    <triggers>
                        <trigger>
                            <expression>{nodata(30m)}=1</expression>
                            <name>node_exporter is not available (or no data for 30m)</name>
                            <priority>WARNING</priority>
                            <description>Failed to fetch system metrics from node_exporter in time.</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>System boot time</name>
                    <type>DEPENDENT</type>
                    <key>system.boottime[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>unixtime</units>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;^node_boot_time(?:_seconds)?$&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU guest time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.guest[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>Guest  time (time  spent  running  a  virtual  CPU  for  a  guest  operating  system)</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_guest_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=~&quot;^(?:user|guest)$&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU guest nice time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.guest_nice[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_guest_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=~&quot;^(?:nice|guest_nice)$&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU idle time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.idle[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The time the CPU has spent doing nothing.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;idle&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU interrupt time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.interrupt[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The amount of time the CPU has been servicing hardware interrupts.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;irq&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Interrupts per second</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.intr[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_intr&quot;}
</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU iowait time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.iowait[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>Amount of time the CPU has been waiting for I/O to complete.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;iowait&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Load average (1m avg)</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.load.avg1[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_load1
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Load average (5m avg)</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.load.avg5[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_load5
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Load average (15m avg)</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.load.avg15[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_load15
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU nice time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.nice[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The time the CPU has spent running users' processes that have been niced.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;nice&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Number of CPUs</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.num[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;idle&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//count the number of cores
return JSON.parse(value).length
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU softirq time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.softirq[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The amount of time the CPU has been servicing software interrupts.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;softirq&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU steal time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.steal[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The amount of CPU 'stolen' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;steal&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Context switches per second</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.switches[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_context_switches&quot;}
</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU system time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.system[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The time the CPU has spent running the kernel and its processes.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;system&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU user time</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.user[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>The time the CPU has spent running users' processes that are not niced.</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;user&quot;}</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</params>
                        </step>
                        <step>
                            <type>CHANGE_PER_SECOND</type>
                            <params/>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>100</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>CPU utilization</name>
                    <type>DEPENDENT</type>
                    <key>system.cpu.util[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>CPU utilization in %</description>
                    <applications>
                        <application>
                            <name>CPU</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//Calculate utilization
return (100 - value)</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>system.cpu.idle[node_exporter]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{min(5m)}&gt;{$CPU.UTIL.CRIT}</expression>
                            <name>High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)</name>
                            <opdata>Current utilization: {ITEM.LASTVALUE1}</opdata>
                            <priority>WARNING</priority>
                            <description>CPU utilization is too high. The system might be slow to respond.</description>
                            <dependencies>
                                <dependency>
                                    <name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</name>
                                    <expression>{Template OS Linux by Prom:system.cpu.load.avg1[node_exporter].min(5m)}/{Template OS Linux by Prom:system.cpu.num[node_exporter].last()}&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}&#13;
and {Template OS Linux by Prom:system.cpu.load.avg5[node_exporter].last()}&gt;0&#13;
and {Template OS Linux by Prom:system.cpu.load.avg15[node_exporter].last()}&gt;0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>System description</name>
                    <type>DEPENDENT</type>
                    <key>system.descr[node_exporter]</key>
                    <delay>0</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>Labeled system information as provided by the uname system call.</description>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>node_uname_info</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var info = JSON.parse(value)[0];
   return info.labels.sysname+' version: '+info.labels.release+' '+info.labels.version</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>System local time</name>
                    <type>DEPENDENT</type>
                    <key>system.localtime[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>unixtime</units>
                    <description>System local time of the host.</description>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;^node_time(?:_seconds)?$&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{fuzzytime({$SYSTEM.FUZZYTIME.MAX})}=0</expression>
                            <name>System time is out of sync (diff with Zabbix server &gt; {$SYSTEM.FUZZYTIME.MAX}s)</name>
                            <priority>WARNING</priority>
                            <description>The host system time is different from the Zabbix server time.</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>System name</name>
                    <type>DEPENDENT</type>
                    <key>system.name[node_exporter]</key>
                    <delay>0</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>System host name.</description>
                    <inventory_link>NAME</inventory_link>
                    <applications>
                        <application>
                            <name>General</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_uname_info
nodename</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                            <name>System name has changed (new name: {ITEM.VALUE})</name>
                            <priority>INFO</priority>
                            <description>System name has changed. Ack to close.</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>Operating system architecture</name>
                    <type>DEPENDENT</type>
                    <key>system.sw.arch[node_exporter]</key>
                    <delay>0</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>Operating system architecture of the host.</description>
                    <applications>
                        <application>
                            <name>Inventory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>node_uname_info
machine</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Operating system</name>
                    <type>DEPENDENT</type>
                    <key>system.sw.os[node_exporter]</key>
                    <delay>0</delay>
                    <history>2w</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <inventory_link>OS</inventory_link>
                    <applications>
                        <application>
                            <name>Inventory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>system.descr[node_exporter]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                            <recovery_mode>NONE</recovery_mode>
                            <name>Operating system description has changed</name>
                            <priority>INFO</priority>
                            <description>Operating system description has changed. Possible reasons that system has been updated or replaced. Ack to close.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>System name has changed (new name: {ITEM.VALUE})</name>
                                    <expression>{Template OS Linux by Prom:system.name[node_exporter].diff()}=1 and {Template OS Linux by Prom:system.name[node_exporter].strlen()}&gt;0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>Free swap space</name>
                    <type>DEPENDENT</type>
                    <key>system.swap.free[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>B</units>
                    <description>The free space of swap volume/file in bytes.</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_memory_SwapFree&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Free swap space in %</name>
                    <type>CALCULATED</type>
                    <key>system.swap.pfree[node_exporter]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <params>last(&quot;system.swap.free[node_exporter]&quot;)/last(&quot;system.swap.total[node_exporter]&quot;)*100</params>
                    <description>The free space of swap volume/file in percent.</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>Total swap space</name>
                    <type>DEPENDENT</type>
                    <key>system.swap.total[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>B</units>
                    <description>The total space of swap volume/file in bytes.</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_memory_SwapTotal&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>System uptime</name>
                    <type>DEPENDENT</type>
                    <key>system.uptime[node_exporter]</key>
                    <delay>0</delay>
                    <history>2w</history>
                    <trends>0d</trends>
                    <units>uptime</units>
                    <description>System uptime in 'N days, hh:mm:ss' format.</description>
                    <applications>
                        <application>
                            <name>Status</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;^node_boot_time(?:_seconds)?$&quot;}
</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>//use boottime to calculate uptime
return (Math.floor(Date.now()/1000)-Number(value));</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{last()}&lt;10m</expression>
                            <name>{HOST.NAME} has been restarted (uptime &lt; 10m)</name>
                            <priority>WARNING</priority>
                            <description>The device uptime is less than 10 minutes</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>Available memory</name>
                    <type>DEPENDENT</type>
                    <key>vm.memory.available[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>B</units>
                    <description>Available memory, in Linux, available = free + buffers + cache. On other platforms calculation may vary. See also: https://www.zabbix.com/documentation/current/manual/appendix/items/vm.memory.size_params</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_memory_MemAvailable&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Total memory</name>
                    <type>DEPENDENT</type>
                    <key>vm.memory.total[node_exporter]</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>B</units>
                    <description>Total memory in Bytes</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_PATTERN</type>
                            <params>{__name__=~&quot;node_memory_MemTotal&quot;}
</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                </item>
                <item>
                    <name>Memory utilization</name>
                    <type>CALCULATED</type>
                    <key>vm.memory.util[node_exporter]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <params>(last(&quot;vm.memory.total[node_exporter]&quot;)-last(&quot;vm.memory.available[node_exporter]&quot;))/last(&quot;vm.memory.total[node_exporter]&quot;)*100</params>
                    <description>Memory used percentage is calculated as (total-available)/total*100</description>
                    <applications>
                        <application>
                            <name>Memory</name>
                        </application>
                    </applications>
                    <triggers>
                        <trigger>
                            <expression>{min(5m)}&gt;{$MEMORY.UTIL.MAX}</expression>
                            <name>High memory utilization ( &gt;{$MEMORY.UTIL.MAX}% for 5m)</name>
                            <priority>AVERAGE</priority>
                            <description>The system is running out of free memory.</description>
                            <dependencies>
                                <dependency>
                                    <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
                                    <expression>{Template OS Linux by Prom:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template OS Linux by Prom:vm.memory.total[node_exporter].last()}&gt;0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>Network interface discovery</name>
                    <type>DEPENDENT</type>
                    <key>net.if.discovery[node_exporter]</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#IFNAME}</macro>
                                <value>{$NET.IF.IFNAME.MATCHES}</value>
                                <formulaid>C</formulaid>
                            </condition>
                            <condition>
                                <macro>{#IFNAME}</macro>
                                <value>{$NET.IF.IFNAME.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>D</formulaid>
                            </condition>
                            <condition>
                                <macro>{#IFALIAS}</macro>
                                <value>{$NET.IF.IFALIAS.MATCHES}</value>
                                <formulaid>A</formulaid>
                            </condition>
                            <condition>
                                <macro>{#IFALIAS}</macro>
                                <value>{$NET.IF.IFALIAS.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>B</formulaid>
                            </condition>
                            <condition>
                                <macro>{#IFOPERSTATUS}</macro>
                                <value>{$NET.IF.IFOPERSTATUS.MATCHES}</value>
                                <formulaid>E</formulaid>
                            </condition>
                            <condition>
                                <macro>{#IFOPERSTATUS}</macro>
                                <value>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>F</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Discovery of network interfaces. Requires node_exporter v0.18 and up.</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded</name>
                            <type>DEPENDENT</type>
                            <key>net.if.in.discards[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_receive_drop_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors</name>
                            <type>DEPENDENT</type>
                            <key>net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_receive_errs_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Bits received</name>
                            <type>DEPENDENT</type>
                            <key>net.if.in[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>bps</units>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_receive_bytes_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>MULTIPLIER</type>
                                    <params>8</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded</name>
                            <type>DEPENDENT</type>
                            <key>net.if.out.discards[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_transmit_drop_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors</name>
                            <type>DEPENDENT</type>
                            <key>net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_transmit_errs_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Bits sent</name>
                            <type>DEPENDENT</type>
                            <key>net.if.out[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>bps</units>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_transmit_bytes_total{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>MULTIPLIER</type>
                                    <params>8</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Speed</name>
                            <type>DEPENDENT</type>
                            <key>net.if.speed[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <trends>0d</trends>
                            <units>bps</units>
                            <description>Sets value to 0 if metric is missing in node_exporter output.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_speed_bytes{device=&quot;{#IFNAME}&quot;}
</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                                <step>
                                    <type>MULTIPLIER</type>
                                    <params>8</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Operational status</name>
                            <type>DEPENDENT</type>
                            <key>net.if.status[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <trends>0</trends>
                            <description>Indicates the interface RFC2863 operational state as a string.&#13;
Possible values are:&quot;unknown&quot;, &quot;notpresent&quot;, &quot;down&quot;, &quot;lowerlayerdown&quot;, &quot;testing&quot;,&quot;dormant&quot;, &quot;up&quot;.&#13;
Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <valuemap>
                                <name>IF-MIB::ifOperStatus</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_info{device=&quot;{#IFNAME}&quot;}
operstate</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>var newvalue;
switch(value) {
  case &quot;up&quot;:
    newvalue = 1;
    break;
  case &quot;down&quot;:
    newvalue = 2;
    break;
  case &quot;testing&quot;:
    newvalue = 4;
    break;
  case &quot;unknown&quot;:
    newvalue = 5;
    break;
  case &quot;dormant&quot;:
    newvalue = 6;
    break;
  case &quot;notPresent&quot;:
    newvalue = 7;
    break;
  default:
    newvalue = &quot;Problem parsing interface operstate in JS&quot;;
}
return newvalue;</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and ({last()}=2 and {diff()}=1)</expression>
                                    <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                                    <recovery_expression>{last()}&lt;&gt;2</recovery_expression>
                                    <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>This trigger expression works as follows:&#13;
1. Can be triggered if operations status is down.&#13;
2. {$IFCONTROL:&quot;{#IFNAME}&quot;}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.&#13;
3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)&#13;
&#13;
WARNING: if closed manually - won't fire again on next poll, because of .diff.</description>
                                    <manual_close>YES</manual_close>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Interface type</name>
                            <type>DEPENDENT</type>
                            <key>net.if.type[node_exporter,&quot;{#IFNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <trends>0d</trends>
                            <description>node_network_protocol_type protocol_type value of /sys/class/net/&lt;iface&gt;.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Interface {#IFNAME}({#IFALIAS})</name>
                                </application_prototype>
                            </application_prototypes>
                            <valuemap>
                                <name>Linux::Interface protocol types</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_network_protocol_type{device=&quot;{#IFNAME}&quot;}
</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                    </item_prototypes>
                    <trigger_prototypes>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].change()}&lt;0 and {Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()}&gt;0&#13;
and (&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=6 or&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=7 or&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=11 or&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=62 or&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=69 or&#13;
{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=117&#13;
)&#13;
and&#13;
({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2)</expression>
                            <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                            <recovery_expression>({Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].change()}&gt;0 and {Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].prev()}&gt;0) or&#13;
({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2)</recovery_expression>
                            <name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name>
                            <opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata>
                            <priority>INFO</priority>
                            <description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                                    <expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and ({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2 and {Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].diff()}=1)</expression>
                                    <recovery_expression>{Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2</recovery_expression>
                                </dependency>
                            </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].change()}&lt;0 and {Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}&gt;0&#13;
and&#13;
({Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=6&#13;
or {Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].last()}=1)&#13;
and&#13;
({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2)</expression>
                            <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                            <recovery_expression>({Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].change()}&gt;0 and {Template OS Linux by Prom:net.if.type[node_exporter,&quot;{#IFNAME}&quot;].prev()}&gt;0) or&#13;
({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2)</recovery_expression>
                            <name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name>
                            <opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata>
                            <priority>INFO</priority>
                            <description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                                    <expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and ({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2 and {Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].diff()}=1)</expression>
                                    <recovery_expression>{Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2</recovery_expression>
                                </dependency>
                            </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                            <expression>({Template OS Linux by Prom:net.if.in[node_exporter,&quot;{#IFNAME}&quot;].avg(15m)}&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()} or&#13;
{Template OS Linux by Prom:net.if.out[node_exporter,&quot;{#IFNAME}&quot;].avg(15m)}&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()}) and&#13;
{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()}&gt;0</expression>
                            <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                            <recovery_expression>{Template OS Linux by Prom:net.if.in[node_exporter,&quot;{#IFNAME}&quot;].avg(15m)}&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()} and&#13;
{Template OS Linux by Prom:net.if.out[node_exporter,&quot;{#IFNAME}&quot;].avg(15m)}&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*{Template OS Linux by Prom:net.if.speed[node_exporter,&quot;{#IFNAME}&quot;].last()}</recovery_expression>
                            <name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage ( &gt; {$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}% )</name>
                            <opdata>In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}</opdata>
                            <priority>WARNING</priority>
                            <description>The network interface utilization is close to its estimated maximum bandwidth.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                                    <expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and ({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2 and {Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].diff()}=1)</expression>
                                    <recovery_expression>{Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2</recovery_expression>
                                </dependency>
                            </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;].min(5m)}&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}&#13;
or {Template OS Linux by Prom:net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;].min(5m)}&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}</expression>
                            <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                            <recovery_expression>{Template OS Linux by Prom:net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;].max(5m)}&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8&#13;
and {Template OS Linux by Prom:net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;].max(5m)}&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8</recovery_expression>
                            <name>Interface {#IFNAME}({#IFALIAS}): High error rate ( &gt; {$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} for 5m)</name>
                            <opdata>errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}</opdata>
                            <priority>WARNING</priority>
                            <description>Recovers when below 80% of {$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} threshold</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                                    <expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and ({Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}=2 and {Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].diff()}=1)</expression>
                                    <recovery_expression>{Template OS Linux by Prom:net.if.status[node_exporter,&quot;{#IFNAME}&quot;].last()}&lt;&gt;2</recovery_expression>
                                </dependency>
                            </dependencies>
                        </trigger_prototype>
                    </trigger_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
                            <graph_items>
                                <graph_item>
                                    <drawtype>GRADIENT_LINE</drawtype>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.in[node_exporter,&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <drawtype>BOLD_LINE</drawtype>
                                    <color>2774A4</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.out[node_exporter,&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>2</sortorder>
                                    <color>F63100</color>
                                    <yaxisside>RIGHT</yaxisside>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>3</sortorder>
                                    <color>A54F10</color>
                                    <yaxisside>RIGHT</yaxisside>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>4</sortorder>
                                    <color>FC6EA3</color>
                                    <yaxisside>RIGHT</yaxisside>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.out.discards[node_exporter,&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>5</sortorder>
                                    <color>6C59DC</color>
                                    <yaxisside>RIGHT</yaxisside>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>net.if.in.discards[node_exporter,&quot;{#IFNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#HELP}</lld_macro>
                            <path>$.help</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#IFALIAS}</lld_macro>
                            <path>$.labels.ifalias</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#IFNAME}</lld_macro>
                            <path>$.labels.device</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#IFOPERSTATUS}</lld_macro>
                            <path>$.labels.operstate</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_network_info$&quot;}</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <name>Block devices discovery</name>
                    <type>DEPENDENT</type>
                    <key>vfs.dev.discovery[node_exporter]</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#DEVNAME}</macro>
                                <value>{$VFS.DEV.DEVNAME.MATCHES}</value>
                                <formulaid>A</formulaid>
                            </condition>
                            <condition>
                                <macro>{#DEVNAME}</macro>
                                <value>{$VFS.DEV.DEVNAME.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>B</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk average queue size (avgqu-sz)</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.queue_size[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Current average disk queue, the number of requests outstanding on the disk at the time the performance data is collected.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_io_time_weighted_seconds_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk read request avg waiting time (r_await)</name>
                            <type>CALCULATED</type>
                            <key>vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>!ms</units>
                            <params>(last(&quot;vfs.dev.read.time.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)/(last(&quot;vfs.dev.read.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)+(last(&quot;vfs.dev.read.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)=0)))*1000*(last(&quot;vfs.dev.read.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;) &gt; 0)</params>
                            <description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk read rate</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>!r/s</units>
                            <description>r/s. The number (after merges) of read requests completed per second for the device.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_reads_completed_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk read time (rate)</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.read.time.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of total read time counter. Used in r_await calculation</description>
                            <applications>
                                <application>
                                    <name>Zabbix raw items</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_read_time_seconds_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk utilization</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.util[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <description>This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_io_time_seconds_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                                <step>
                                    <type>MULTIPLIER</type>
                                    <params>100</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk write request avg waiting time (w_await)</name>
                            <type>CALCULATED</type>
                            <key>vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>!ms</units>
                            <params>(last(&quot;vfs.dev.write.time.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)/(last(&quot;vfs.dev.write.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)+(last(&quot;vfs.dev.write.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;)=0)))*1000*(last(&quot;vfs.dev.write.rate[node_exporter,\&quot;{#DEVNAME}\&quot;]&quot;) &gt; 0)</params>
                            <description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk write rate</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>!w/s</units>
                            <description>w/s. The number (after merges) of write requests completed per second for the device.</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Disk {#DEVNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_writes_completed_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#DEVNAME}: Disk write time (rate)</name>
                            <type>DEPENDENT</type>
                            <key>vfs.dev.write.time.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of total write time counter. Used in w_await calculation</description>
                            <applications>
                                <application>
                                    <name>Zabbix raw items</name>
                                </application>
                            </applications>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>node_disk_write_time_seconds_total{device=&quot;{#DEVNAME}&quot;}
</params>
                                </step>
                                <step>
                                    <type>CHANGE_PER_SECOND</type>
                                    <params/>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                    </item_prototypes>
                    <trigger_prototypes>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;].min(15m)} &gt; {$VFS.DEV.READ.AWAIT.WARN:&quot;{#DEVNAME}&quot;} or {Template OS Linux by Prom:vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;].min(15m)} &gt; {$VFS.DEV.WRITE.AWAIT.WARN:&quot;{#DEVNAME}&quot;}</expression>
                            <name>{#DEVNAME}: Disk read/write request responses are too high (read &gt; {$VFS.DEV.READ.AWAIT.WARN:&quot;{#DEVNAME}&quot;} ms for 15m or write &gt; {$VFS.DEV.WRITE.AWAIT.WARN:&quot;{#DEVNAME}&quot;} ms for 15m)</name>
                            <priority>WARNING</priority>
                            <description>This trigger might indicate disk {#DEVNAME} saturation.</description>
                            <manual_close>YES</manual_close>
                        </trigger_prototype>
                    </trigger_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>{#DEVNAME}: Disk average waiting time</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <drawtype>GRADIENT_LINE</drawtype>
                                    <color>2774A4</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                        <graph_prototype>
                            <name>{#DEVNAME}: Disk read/write rates</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <drawtype>GRADIENT_LINE</drawtype>
                                    <color>2774A4</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                        <graph_prototype>
                            <name>{#DEVNAME}: Disk utilization and queue</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <yaxisside>RIGHT</yaxisside>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.queue_size[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <drawtype>GRADIENT_LINE</drawtype>
                                    <color>2774A4</color>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.dev.util[node_exporter,&quot;{#DEVNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#DEVNAME}</lld_macro>
                            <path>$.labels.device</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#HELP}</lld_macro>
                            <path>$.help</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>node_disk_io_now{device=~&quot;.+&quot;}</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <name>Mounted filesystem discovery</name>
                    <type>DEPENDENT</type>
                    <key>vfs.fs.discovery[node_exporter]</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#FSTYPE}</macro>
                                <value>{$VFS.FS.FSTYPE.MATCHES}</value>
                                <formulaid>E</formulaid>
                            </condition>
                            <condition>
                                <macro>{#FSTYPE}</macro>
                                <value>{$VFS.FS.FSTYPE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>F</formulaid>
                            </condition>
                            <condition>
                                <macro>{#FSNAME}</macro>
                                <value>{$VFS.FS.FSNAME.MATCHES}</value>
                                <formulaid>B</formulaid>
                            </condition>
                            <condition>
                                <macro>{#FSNAME}</macro>
                                <value>{$VFS.FS.FSNAME.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>C</formulaid>
                            </condition>
                            <condition>
                                <macro>{#FSNAME}</macro>
                                <value>{$VFS.FS.FSDEVICE.MATCHES}</value>
                                <formulaid>D</formulaid>
                            </condition>
                            <condition>
                                <macro>{#FSDEVICE}</macro>
                                <value>{$VFS.FS.FSDEVICE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>A</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Discovery of file systems of different types.</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>{#FSNAME}: Free space</name>
                            <type>DEPENDENT</type>
                            <key>vfs.fs.free[node_exporter,&quot;{#FSNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>B</units>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Filesystem {#FSNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>{__name__=~&quot;^node_filesystem_avail(?:_bytes)?$&quot;, mountpoint=&quot;{#FSNAME}&quot;}
</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#FSNAME}: Free inodes in %</name>
                            <type>DEPENDENT</type>
                            <key>vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Filesystem {#FSNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_TO_JSON</type>
                                    <params>{__name__=~&quot;node_filesystem_files.*&quot;,mountpoint=&quot;{#FSNAME}&quot;}</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>//count vfs.fs.inode.pfree
var inode_free;
var inode_total;
JSON.parse(value).forEach(function(metric) {
  if (metric['name'] == 'node_filesystem_files'){
      inode_total = metric['value'];
  } else if (metric['name'] == 'node_filesystem_files_free'){
      inode_free = metric['value'];
  }
});
return (inode_free/inode_total)*100;</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}</expression>
                                    <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}%)</name>
                                    <opdata>Free inodes: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>It may become impossible to write to disk if there are no index nodes left.&#13;
As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description>
                                </trigger_prototype>
                                <trigger_prototype>
                                    <expression>{min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.WARN:&quot;{#FSNAME}&quot;}</expression>
                                    <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.WARN:&quot;{#FSNAME}&quot;}%)</name>
                                    <opdata>Free inodes: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                    <description>It may become impossible to write to disk if there are no index nodes left.&#13;
As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description>
                                    <dependencies>
                                        <dependency>
                                            <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}%)</name>
                                            <expression>{Template OS Linux by Prom:vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;].min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}</expression>
                                        </dependency>
                                    </dependencies>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>{#FSNAME}: Space utilization</name>
                            <type>CALCULATED</type>
                            <key>vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>%</units>
                            <params>(last(&quot;vfs.fs.used[node_exporter,\&quot;{#FSNAME}\&quot;]&quot;)/last(&quot;vfs.fs.total[node_exporter,\&quot;{#FSNAME}\&quot;]&quot;))*100</params>
                            <description>Space utilization in % for {#FSNAME}</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Filesystem {#FSNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>{#FSNAME}: Total space</name>
                            <type>DEPENDENT</type>
                            <key>vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>B</units>
                            <description>Total space in Bytes</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Filesystem {#FSNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>PROMETHEUS_PATTERN</type>
                                    <params>{__name__=~&quot;^node_filesystem_size(?:_bytes)?$&quot;, mountpoint=&quot;{#FSNAME}&quot;}
</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>node_exporter.get</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>{#FSNAME}: Used space</name>
                            <type>CALCULATED</type>
                            <key>vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]</key>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <units>B</units>
                            <params>(last(&quot;vfs.fs.total[node_exporter,\&quot;{#FSNAME}\&quot;]&quot;)-last(&quot;vfs.fs.free[node_exporter,\&quot;{#FSNAME}\&quot;]&quot;))</params>
                            <description>Used storage in Bytes</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>Filesystem {#FSNAME}</name>
                                </application_prototype>
                            </application_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <trigger_prototypes>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].last()}&gt;{$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;} and&#13;
(({Template OS Linux by Prom:vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;].last()}-{Template OS Linux by Prom:vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;].last()})&lt;5G or {Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].timeleft(1h,,100)}&lt;1d)</expression>
                            <name>{#FSNAME}: Disk space is critically low (used &gt; {$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;}%)</name>
                            <opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata>
                            <priority>AVERAGE</priority>
                            <description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;}.&#13;
 Second condition should be one of the following:&#13;
 - The disk free space is less than 5G.&#13;
 - The disk will be full in less than 24 hours.</description>
                            <manual_close>YES</manual_close>
                        </trigger_prototype>
                        <trigger_prototype>
                            <expression>{Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].last()}&gt;{$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;} and&#13;
(({Template OS Linux by Prom:vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;].last()}-{Template OS Linux by Prom:vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;].last()})&lt;10G or {Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].timeleft(1h,,100)}&lt;1d)</expression>
                            <name>{#FSNAME}: Disk space is low (used &gt; {$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;}%)</name>
                            <opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata>
                            <priority>WARNING</priority>
                            <description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;}.&#13;
 Second condition should be one of the following:&#13;
 - The disk free space is less than 10G.&#13;
 - The disk will be full in less than 24 hours.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>{#FSNAME}: Disk space is critically low (used &gt; {$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;}%)</name>
                                    <expression>{Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].last()}&gt;{$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;} and&#13;
(({Template OS Linux by Prom:vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;].last()}-{Template OS Linux by Prom:vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;].last()})&lt;5G or {Template OS Linux by Prom:vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;].timeleft(1h,,100)}&lt;1d)</expression>
                                </dependency>
                            </dependencies>
                        </trigger_prototype>
                    </trigger_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>{#FSNAME}: Disk space usage</name>
                            <width>600</width>
                            <height>340</height>
                            <type>PIE</type>
                            <show_3d>YES</show_3d>
                            <graph_items>
                                <graph_item>
                                    <color>969696</color>
                                    <calc_fnc>LAST</calc_fnc>
                                    <type>GRAPH_SUM</type>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <color>C80000</color>
                                    <calc_fnc>LAST</calc_fnc>
                                    <item>
                                        <host>Template OS Linux by Prom</host>
                                        <key>vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>node_exporter.get</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#FSDEVICE}</lld_macro>
                            <path>$.labels.device</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#FSNAME}</lld_macro>
                            <path>$.labels.mountpoint</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#FSTYPE}</lld_macro>
                            <path>$.labels.fstype</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#HELP}</lld_macro>
                            <path>$.help</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                    <preprocessing>
                        <step>
                            <type>PROMETHEUS_TO_JSON</type>
                            <params>{__name__=~&quot;^node_filesystem_size(?:_bytes)?$&quot;, mountpoint=~&quot;.+&quot;}</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$CPU.UTIL.CRIT}</macro>
                    <value>90</value>
                </macro>
                <macro>
                    <macro>{$IF.ERRORS.WARN}</macro>
                    <value>2</value>
                </macro>
                <macro>
                    <macro>{$IF.UTIL.MAX}</macro>
                    <value>90</value>
                </macro>
                <macro>
                    <macro>{$IFCONTROL}</macro>
                    <value>1</value>
                </macro>
                <macro>
                    <macro>{$KERNEL.MAXFILES.MIN}</macro>
                    <value>256</value>
                </macro>
                <macro>
                    <macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro>
                    <value>1.5</value>
                    <description>Load per CPU considered sustainable. Tune if needed.</description>
                </macro>
                <macro>
                    <macro>{$MEMORY.AVAILABLE.MIN}</macro>
                    <value>20M</value>
                </macro>
                <macro>
                    <macro>{$MEMORY.UTIL.MAX}</macro>
                    <value>90</value>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFALIAS.MATCHES}</macro>
                    <value>^.*$</value>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFALIAS.NOT_MATCHES}</macro>
                    <value>CHANGE_IF_NEEDED</value>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFNAME.MATCHES}</macro>
                    <value>^.*$</value>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro>
                    <value>(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9a-z]+$|docker[0-9]+|br-[a-z0-9]{12})</value>
                    <description>Filter out loopbacks, nulls, docker veth links and docker0 bridge by default</description>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFOPERSTATUS.MATCHES}</macro>
                    <value>^.*$</value>
                </macro>
                <macro>
                    <macro>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</macro>
                    <value>^7$</value>
                    <description>Ignore notPresent(7)</description>
                </macro>
                <macro>
                    <macro>{$NODE_EXPORTER_PORT}</macro>
                    <value>9100</value>
                    <description>TCP Port node_exporter is listening on.</description>
                </macro>
                <macro>
                    <macro>{$SWAP.PFREE.MIN.WARN}</macro>
                    <value>50</value>
                </macro>
                <macro>
                    <macro>{$SYSTEM.FUZZYTIME.MAX}</macro>
                    <value>60</value>
                </macro>
                <macro>
                    <macro>{$VFS.DEV.DEVNAME.MATCHES}</macro>
                    <value>.+</value>
                    <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.DEV.DEVNAME.NOT_MATCHES}</macro>
                    <value>^(loop[0-9]*|sd[a-z][0-9]+|nbd[0-9]+|sr[0-9]+|fd[0-9]+|dm-[0-9]+|ram[0-9]+|ploop[a-z0-9]+|md[0-9]*|hcp[0-9]*|zram[0-9]*)</value>
                    <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.DEV.READ.AWAIT.WARN}</macro>
                    <value>20</value>
                    <description>Disk read average response time (in ms) before the trigger would fire</description>
                </macro>
                <macro>
                    <macro>{$VFS.DEV.WRITE.AWAIT.WARN}</macro>
                    <value>20</value>
                    <description>Disk write average response time (in ms) before the trigger would fire</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSDEVICE.MATCHES}</macro>
                    <value>^.+$</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSDEVICE.NOT_MATCHES}</macro>
                    <value>^\s$</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSNAME.MATCHES}</macro>
                    <value>.+</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSNAME.NOT_MATCHES}</macro>
                    <value>^(/dev|/sys|/run|/proc|.+/shm$)</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSTYPE.MATCHES}</macro>
                    <value>^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|ufs|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.FSTYPE.NOT_MATCHES}</macro>
                    <value>^\s$</value>
                    <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
                </macro>
                <macro>
                    <macro>{$VFS.FS.INODE.PFREE.MIN.CRIT}</macro>
                    <value>10</value>
                </macro>
                <macro>
                    <macro>{$VFS.FS.INODE.PFREE.MIN.WARN}</macro>
                    <value>20</value>
                </macro>
                <macro>
                    <macro>{$VFS.FS.PUSED.MAX.CRIT}</macro>
                    <value>90</value>
                </macro>
                <macro>
                    <macro>{$VFS.FS.PUSED.MAX.WARN}</macro>
                    <value>80</value>
                </macro>
            </macros>
            <screens>
                <screen>
                    <name>Network interfaces</name>
                    <hsize>1</hsize>
                    <vsize>1</vsize>
                    <screen_items>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                    </screen_items>
                </screen>
                <screen>
                    <name>System performance</name>
                    <hsize>2</hsize>
                    <vsize>7</vsize>
                    <screen_items>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>System load</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>CPU usage</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>1</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>Memory usage</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>Swap usage</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>1</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>{#FSNAME}: Disk space usage</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>2</y>
                            <colspan>2</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>{#DEVNAME}: Disk read/write rates</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>3</y>
                            <colspan>2</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>{#DEVNAME}: Disk average waiting time</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>4</y>
                            <colspan>2</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>{#DEVNAME}: Disk utilization and queue</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>5</y>
                            <colspan>2</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>20</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
                                <host>Template OS Linux by Prom</host>
                            </resource>
                            <width>750</width>
                            <height>100</height>
                            <x>0</x>
                            <y>6</y>
                            <colspan>2</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                    </screen_items>
                </screen>
            </screens>
        </template>
    </templates>
    <triggers>
        <trigger>
            <expression>{Template OS Linux by Prom:system.swap.pfree[node_exporter].min(5m)}&lt;{$SWAP.PFREE.MIN.WARN} and {Template OS Linux by Prom:system.swap.total[node_exporter].last()}&gt;0</expression>
            <name>High swap space usage ( less than {$SWAP.PFREE.MIN.WARN}% free)</name>
            <opdata>Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata>
            <priority>WARNING</priority>
            <description>This trigger is ignored, if there is no swap configured</description>
            <dependencies>
                <dependency>
                    <name>High memory utilization ( &gt;{$MEMORY.UTIL.MAX}% for 5m)</name>
                    <expression>{Template OS Linux by Prom:vm.memory.util[node_exporter].min(5m)}&gt;{$MEMORY.UTIL.MAX}</expression>
                </dependency>
                <dependency>
                    <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
                    <expression>{Template OS Linux by Prom:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template OS Linux by Prom:vm.memory.total[node_exporter].last()}&gt;0</expression>
                </dependency>
            </dependencies>
        </trigger>
        <trigger>
            <expression>{Template OS Linux by Prom:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template OS Linux by Prom:vm.memory.total[node_exporter].last()}&gt;0</expression>
            <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
            <opdata>Available: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata>
            <priority>AVERAGE</priority>
        </trigger>
        <trigger>
            <expression>{Template OS Linux by Prom:system.cpu.load.avg1[node_exporter].min(5m)}/{Template OS Linux by Prom:system.cpu.num[node_exporter].last()}&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}&#13;
and {Template OS Linux by Prom:system.cpu.load.avg5[node_exporter].last()}&gt;0&#13;
and {Template OS Linux by Prom:system.cpu.load.avg15[node_exporter].last()}&gt;0</expression>
            <name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</name>
            <opdata>Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}</opdata>
            <priority>AVERAGE</priority>
            <description>Per CPU load average is too high. Your system may be slow to respond.</description>
        </trigger>
        <trigger>
            <expression>{Template OS Linux by Prom:fd.open[node_exporter].last()}/{Template OS Linux by Prom:kernel.maxfiles[node_exporter].last()}*100&gt;80</expression>
            <name>Running out of file descriptors (less than &lt; 20% free)</name>
            <opdata>{ITEM.LASTVALUE1} of {ITEM.LASTVALUE2} file descriptors are in use.</opdata>
            <priority>WARNING</priority>
        </trigger>
    </triggers>
    <graphs>
        <graph>
            <name>CPU jumps</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.switches[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.intr[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>CPU usage</name>
            <type>STACKED</type>
            <ymin_type_1>FIXED</ymin_type_1>
            <ymax_type_1>FIXED</ymax_type_1>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.system[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.user[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.nice[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>3</sortorder>
                    <color>A54F10</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.iowait[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>4</sortorder>
                    <color>FC6EA3</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.steal[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>5</sortorder>
                    <color>6C59DC</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.interrupt[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>6</sortorder>
                    <color>AC8C14</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.softirq[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>7</sortorder>
                    <color>611F27</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.guest[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>8</sortorder>
                    <color>F230E0</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.guest_nice[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>CPU utilization</name>
            <ymin_type_1>FIXED</ymin_type_1>
            <ymax_type_1>FIXED</ymax_type_1>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.util[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>Memory usage</name>
            <ymin_type_1>FIXED</ymin_type_1>
            <graph_items>
                <graph_item>
                    <drawtype>BOLD_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>vm.memory.total[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>2774A4</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>vm.memory.available[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>Memory utilization</name>
            <ymin_type_1>FIXED</ymin_type_1>
            <ymax_type_1>FIXED</ymax_type_1>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>vm.memory.util[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>Swap usage</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.swap.free[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.swap.total[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>System load</name>
            <ymin_type_1>FIXED</ymin_type_1>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.load.avg1[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.load.avg5[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.load.avg15[node_exporter]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>3</sortorder>
                    <color>A54F10</color>
                    <yaxisside>RIGHT</yaxisside>
                    <item>
                        <host>Template OS Linux by Prom</host>
                        <key>system.cpu.num[node_exporter]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
    </graphs>
    <value_maps>
        <value_map>
            <name>IF-MIB::ifOperStatus</name>
            <mappings>
                <mapping>
                    <value>1</value>
                    <newvalue>up</newvalue>
                </mapping>
                <mapping>
                    <value>2</value>
                    <newvalue>down</newvalue>
                </mapping>
                <mapping>
                    <value>4</value>
                    <newvalue>unknown</newvalue>
                </mapping>
                <mapping>
                    <value>5</value>
                    <newvalue>dormant</newvalue>
                </mapping>
                <mapping>
                    <value>6</value>
                    <newvalue>notPresent</newvalue>
                </mapping>
                <mapping>
                    <value>7</value>
                    <newvalue>lowerLayerDown</newvalue>
                </mapping>
            </mappings>
        </value_map>
        <value_map>
            <name>Linux::Interface protocol types</name>
            <mappings>
                <mapping>
                    <value>0</value>
                    <newvalue>from KA9Q: NET/ROM pseudo</newvalue>
                </mapping>
                <mapping>
                    <value>1</value>
                    <newvalue>Ethernet</newvalue>
                </mapping>
                <mapping>
                    <value>2</value>
                    <newvalue>Experimental Ethernet</newvalue>
                </mapping>
                <mapping>
                    <value>3</value>
                    <newvalue>AX.25 Level 2</newvalue>
                </mapping>
                <mapping>
                    <value>4</value>
                    <newvalue>PROnet token ring</newvalue>
                </mapping>
                <mapping>
                    <value>5</value>
                    <newvalue>Chaosnet</newvalue>
                </mapping>
                <mapping>
                    <value>6</value>
                    <newvalue>IEEE 802.2 Ethernet/TR/TB</newvalue>
                </mapping>
                <mapping>
                    <value>7</value>
                    <newvalue>ARCnet</newvalue>
                </mapping>
                <mapping>
                    <value>8</value>
                    <newvalue>APPLEtalk</newvalue>
                </mapping>
                <mapping>
                    <value>15</value>
                    <newvalue>Frame Relay DLCI</newvalue>
                </mapping>
                <mapping>
                    <value>19</value>
                    <newvalue>ATM</newvalue>
                </mapping>
                <mapping>
                    <value>23</value>
                    <newvalue>Metricom STRIP (new IANA id)</newvalue>
                </mapping>
                <mapping>
                    <value>24</value>
                    <newvalue>IEEE 1394 IPv4 - RFC 2734</newvalue>
                </mapping>
                <mapping>
                    <value>27</value>
                    <newvalue>EUI-64</newvalue>
                </mapping>
                <mapping>
                    <value>32</value>
                    <newvalue>InfiniBand</newvalue>
                </mapping>
                <mapping>
                    <value>256</value>
                    <newvalue>ARPHRD_SLIP</newvalue>
                </mapping>
                <mapping>
                    <value>257</value>
                    <newvalue>ARPHRD_CSLIP</newvalue>
                </mapping>
                <mapping>
                    <value>258</value>
                    <newvalue>ARPHRD_SLIP6</newvalue>
                </mapping>
                <mapping>
                    <value>259</value>
                    <newvalue>ARPHRD_CSLIP6</newvalue>
                </mapping>
                <mapping>
                    <value>260</value>
                    <newvalue>Notional KISS type</newvalue>
                </mapping>
                <mapping>
                    <value>264</value>
                    <newvalue>ARPHRD_ADAPT</newvalue>
                </mapping>
                <mapping>
                    <value>270</value>
                    <newvalue>ARPHRD_ROSE</newvalue>
                </mapping>
                <mapping>
                    <value>271</value>
                    <newvalue>CCITT X.25</newvalue>
                </mapping>
                <mapping>
                    <value>272</value>
                    <newvalue>Boards with X.25 in firmware</newvalue>
                </mapping>
                <mapping>
                    <value>280</value>
                    <newvalue>Controller Area Network</newvalue>
                </mapping>
                <mapping>
                    <value>512</value>
                    <newvalue>ARPHRD_PPP</newvalue>
                </mapping>
                <mapping>
                    <value>513</value>
                    <newvalue>Cisco HDLC</newvalue>
                </mapping>
                <mapping>
                    <value>516</value>
                    <newvalue>LAPB</newvalue>
                </mapping>
                <mapping>
                    <value>517</value>
                    <newvalue>Digital's DDCMP protocol</newvalue>
                </mapping>
                <mapping>
                    <value>518</value>
                    <newvalue>Raw HDLC</newvalue>
                </mapping>
                <mapping>
                    <value>519</value>
                    <newvalue>Raw IP</newvalue>
                </mapping>
                <mapping>
                    <value>768</value>
                    <newvalue>IPIP tunnel</newvalue>
                </mapping>
                <mapping>
                    <value>769</value>
                    <newvalue>IP6IP6 tunnel</newvalue>
                </mapping>
                <mapping>
                    <value>770</value>
                    <newvalue>Frame Relay Access Device</newvalue>
                </mapping>
                <mapping>
                    <value>771</value>
                    <newvalue>SKIP vif</newvalue>
                </mapping>
                <mapping>
                    <value>772</value>
                    <newvalue>Loopback device</newvalue>
                </mapping>
                <mapping>
                    <value>773</value>
                    <newvalue>Localtalk device</newvalue>
                </mapping>
                <mapping>
                    <value>774</value>
                    <newvalue>Fiber Distributed Data Interface</newvalue>
                </mapping>
                <mapping>
                    <value>775</value>
                    <newvalue>AP1000 BIF</newvalue>
                </mapping>
                <mapping>
                    <value>776</value>
                    <newvalue>sit0 device - IPv6-in-IPv4</newvalue>
                </mapping>
                <mapping>
                    <value>777</value>
                    <newvalue>IP over DDP tunneller</newvalue>
                </mapping>
                <mapping>
                    <value>778</value>
                    <newvalue>GRE over IP</newvalue>
                </mapping>
                <mapping>
                    <value>779</value>
                    <newvalue>PIMSM register interface</newvalue>
                </mapping>
                <mapping>
                    <value>780</value>
                    <newvalue>High Performance Parallel Interface</newvalue>
                </mapping>
                <mapping>
                    <value>781</value>
                    <newvalue>Nexus 64Mbps Ash</newvalue>
                </mapping>
                <mapping>
                    <value>782</value>
                    <newvalue>Acorn Econet</newvalue>
                </mapping>
                <mapping>
                    <value>783</value>
                    <newvalue>Linux-IrDA</newvalue>
                </mapping>
                <mapping>
                    <value>784</value>
                    <newvalue>Point to point fibrechannel</newvalue>
                </mapping>
                <mapping>
                    <value>785</value>
                    <newvalue>Fibrechannel arbitrated loop</newvalue>
                </mapping>
                <mapping>
                    <value>786</value>
                    <newvalue>Fibrechannel public loop</newvalue>
                </mapping>
                <mapping>
                    <value>787</value>
                    <newvalue>Fibrechannel fabric</newvalue>
                </mapping>
                <mapping>
                    <value>800</value>
                    <newvalue>Magic type ident for TR</newvalue>
                </mapping>
                <mapping>
                    <value>801</value>
                    <newvalue>IEEE 802.11</newvalue>
                </mapping>
                <mapping>
                    <value>802</value>
                    <newvalue>IEEE 802.11 + Prism2 header</newvalue>
                </mapping>
                <mapping>
                    <value>803</value>
                    <newvalue>IEEE 802.11 + radiotap header</newvalue>
                </mapping>
                <mapping>
                    <value>804</value>
                    <newvalue>ARPHRD_IEEE802154</newvalue>
                </mapping>
                <mapping>
                    <value>805</value>
                    <newvalue>IEEE 802.15.4 network monitor</newvalue>
                </mapping>
                <mapping>
                    <value>820</value>
                    <newvalue>PhoNet media type</newvalue>
                </mapping>
                <mapping>
                    <value>821</value>
                    <newvalue>PhoNet pipe header</newvalue>
                </mapping>
                <mapping>
                    <value>822</value>
                    <newvalue>CAIF media type</newvalue>
                </mapping>
                <mapping>
                    <value>823</value>
                    <newvalue>GRE over IPv6</newvalue>
                </mapping>
                <mapping>
                    <value>824</value>
                    <newvalue>Netlink header</newvalue>
                </mapping>
                <mapping>
                    <value>825</value>
                    <newvalue>IPv6 over LoWPAN</newvalue>
                </mapping>
                <mapping>
                    <value>826</value>
                    <newvalue>Vsock monitor header</newvalue>
                </mapping>
            </mappings>
        </value_map>
    </value_maps>
</zabbix_export>
